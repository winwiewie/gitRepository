
try{
	예외가 발생할것같은 문장
} catch(Exception e1) {
	Exception1 이발생할경우 문장을 적는다 
}
}catch(Exception e2) {
	Exception2 이발생할경우 문장을 적는다 
}

예외처리
정의 - 프로그램 실행시 발생할 수 있는 예외의 발생에 대비한 코드를 작성하는 것
목적 - 프로그램의 비정상 종료를 막고, 정상적인 실행상태를 유지하는 것

실행순서
try 블록 내에서 예외가 발생한 경우,
1. 발생한 예외와 일치하는 catch블럭이 있는지 확인한다.
2. 일치하는 catch 블럭을 찾게 되면, 그 chtch블럭내의
문장들을 수행하고 전체 try-chtch 문을 빠져나가서
그다음 문장을 계속해서 수행한다.
만일 일치하는 catch블럭을 찾지 못하면,
예외는 처리되지 못한다.

try블럭 내에서 예외가 발생하지 않은 경우
1. catch 블록을 거치지 않고 전체 try-catch문을 빠져나가서 수행을 계속한다.


printStackTrace()
예외발생 당시의 호출스택에 있었던 메서드의 정보와
예외 메시지를 화면에 출력한다

getMessage()
발생한 예외클래스의 인스턴스에 저장된 메시지를 얻을수 잇다


컴파일러가 예외처리를 확인하지 않는
RuntimeException클래스들(자식클래스)은
unchecked예외 라고 부르고
예외처리를 확인하는 Exception클래스들은
checked 예외라고 부른다.

예외를 처리하는 방법
1. try-cathch
2. throws
표현식

반환타입 메서드명() throws Exception1, Exception2, Exception3, .....
ExceptionN{
//메서드내용
}

예외를 메서드의 throws에 명시하는 것은
예외를 처리하는 것이 아니라,
자신(예외가 발생할 가능성이 있는 메서드)을
호출한 메서드에게 예외를 전달하여 예외처리를 떠맡기는 것이다.





